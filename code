!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/

!kaggle datasets download -d salader/dogs-vs-cats

#You have to add your kaggle API token key in files.

import zipfile
zip_ref = zipfile.ZipFile('/content/dogs-vs-cats.zip', 'r')
zip_ref.extractall('/content')
zip_ref.close()

import tensorflow
from tensorflow import keras
from keras import Sequential
from keras.layers import Dense,Flatten
from keras.applications.vgg16 import VGG16


# VGG16 is a pre-trained model trained on dataset of imagenet
conv_base = VGG16(
    weights='imagenet',
    include_top = False,
    input_shape=(150,150,3)
) 


# Build a Model
model = Sequential()

model.add(conv_base)
model.add(Flatten())
model.add(Dense(256,activation='relu'))
model.add(Dense(1,activation='sigmoid'))

conv_base.trainable = False   # Here the convolutional layers are getting frozed (these layers won't get trained but only the dense layers)


from tensorflow.keras.utils import img_to_array, array_to_img, load_img
from keras.preprocessing.image import ImageDataGenerator

batch_size = 32

train_datagen = ImageDataGenerator(                  # Treating the problem of overfitting by data augmentation
        rescale=1./255,
        shear_range=0.2,
        zoom_range=0.2,
        horizontal_flip=True)

test_datagen = ImageDataGenerator(rescale=1./255)

train_generator = train_datagen.flow_from_directory(
        '/content/train',
        target_size=(150, 150),
        batch_size=batch_size,
        class_mode='binary') 

validation_generator = test_datagen.flow_from_directory(
        '/content/test',
        target_size=(150, 150),
        batch_size=batch_size,
        class_mode='binary')

# Compile the Model
model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])


# Fit the Model
history = model.fit_generator(
        train_generator,
        epochs=10,
        validation_data=validation_generator)


# Plot the model to visulaize the losses

import matplotlib.pyplot as plt
plt.figure(figsize=(10,7))
plt.plot(history.history['accuracy'],color='red',label='train')
plt.plot(history.history['val_accuracy'],color='blue',label='validation')
plt.legend()
plt.show()


plt.figure(figsize=(10,7))
plt.plot(history.history['loss'],color='red',label='train')
plt.plot(history.history['val_loss'],color='blue',label='validation')
plt.legend()
plt.show()
